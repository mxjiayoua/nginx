# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;   #用户
worker_processes auto;  #nginx 进程数，建议按照cpu 数目来指定，一般为它的倍数 (如,2个四核的cpu计为8)。,查看cpu数目（lscpu    |grep  "CPU(s)" |head  -n 1）

error_log /var/log/nginx/error.log;   #错误日志
pid /run/nginx.pid;   #nginx的pid

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;     #加载/usr/share/nginx/modules/目录下的.conf配置文件

events {
	use epoll;  #事件驱动模型
	accept_mutex on; #惊群现象，多个睡眠的进程被同事叫醒，但只有一个进程能获得链接，这样会影响系统性能。防止惊群现象发生，默认为on
	multi_accept on; #设置是否允许同时接受多个网络连接，即默认为一个工作进程只能一次接受一个新的网络连接，打开后几个同时接受多个
	worker_connections 9000;  #最大连接数 = worker_processes(核数）* worker_connections/4
	#查看相关资料，生产环境中worker_connections 建议值最好超过9000，计划将一台nginx 设置为10240，再观察一段时间。
}

http {
    limit_conn_log_level error;    #连接的错误日志级别
    limit_conn_status 503;  #连接错误返回的状态码
    limit_req_status 503;   #请求错误返回的状态码
    limit_conn_zone $binary_remote_addr zone=one:10m;     #设置共享内存区域和给定键值的最大并发连接数  “none”为存储区名（$binary_remote_addr = 用二进制来储存客户端的地址，1m 可以储存 32000 个并发会话）               #在HTTP/2和SPDY中，每个并发请求被视为单独的连接。

    limit_conn_zone $server_name zone=perserver:10m;     #设置共享内存区域和给定键值的最大允许服务器连接数
    limit_req_zone  $binary_remote_addr zone=allips:10m   rate=1r/s;  #设置共享内存区域和给定键值的最大并发请求连接，允许1秒钟不超过1个请求（实验测试，具体根据业务需求设置）

    #可以查看https://nginx.org/en/docs/http/ngx_http_core_module.html#var_status解释
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer"'
                      '"$http_user_agent"  "$http_x_forwarded_for"'
		     # '"$realip_remote_addr" "$realip_remote_port"';
   
	#$remote_addr   客户地址
	#- $remote_user [$time_local]   返回时间   （$time_local 通用日志格式的本地时间 ）
	#$request     完整的原始请求行
	#$status   回应请求状态      200、301、302、403、404、500、502、504  这些状态的大概产生的的情况需要了解
        #$body_bytes_sent   发送到客户端的字节数，不包括响应头; 此变量与 Apache模块 的“ %B”参数 兼容mod_log_config
	#$http_referer       当浏览器向web服务器发送请求的时候,一般会带上Referer,告诉服务器该网页是从哪个页面链接过来的 
 	#$http_user_agent    User-Agent头域的内容包含发出请求的用户信息。 （使用<F12>键进入开发者工具模式，选择network网络使用<F5>进行刷新，查看获取User-Agent:的请求浏览器类型。爬虫使用，简单的反爬虫）		
	#$realip_remote_addr 保留原始客户端地址
	#$realip_remote_port 保留原始客户端端口
	#对于其他的查看网址https://nginx.org/en/docs/http/ngx_http_core_module.html#var_status

    access_log   /var/log/nginx/access.log  main;  #nginx访问调用main模板中的返回  （log_format  main上面配置）

    sendfile            on;   #sendfile系统调用在两个文件描述符之间直接传递数据(完全在内核中操作)，从而避免了数据在内核缓冲区和用户缓冲区之间的拷贝，操作效率很高，被称之为零拷贝。
    tcp_nopush          on;  # nginx 在一个包中发送全部的头文件，而不是一个一个发送(塞子，堵塞到一定大小，塞子拔掉全部发送)。能够达到优化吞吐的效果,选项仅在使用sendfile的时候才开启
    tcp_nodelay         on; #禁用Nagle算法，即数据包立即发送出去（这个能够提高高频发送小数据报文的实时性。系统存在高频发送小数据报文的时候，打开它。）
    keepalive_timeout   65;  #它告诉 webserver 在处理完一个请求后保持这个 TCP 连接的打开状态。若接收到来自客户端的其它请求，服务端会利用这个未被关闭的连接，而不需要再建立一个连接。（缺点：它们会在这段时间内占用资源。占用过多就会影响性能）
    types_hash_max_size 2048;  #消耗的内存就越小,但散列key的冲突率可能上升

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;
    server_tokens  off;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
   include /etc/nginx/conf.d/*.conf;

    server {
        listen       80 default_server;	
        server_name  www,jiayoua.club;

#####################重定向###############################################
#	rewrite	 ^(.*)$ https://www,jiayoua.club  permanent;
#	rewrite	 ^(.*)$  https://$server_name/$1  permanent;
#	rewrite	 ^(.*)$   https://$host$1  permanent;   #重定向——早期的写法
#	rewrite	 ^(.*)$   https://$server_name  permanent;
#	rewrite	 ^(.*)$   https://www.baidu.com  permanent;			
#	return 301  https://www.baidu.com$request_uri;  #访问重定向到百度地址
#############################################################################

        root         /usr/share/nginx/html;    #nginx默认的web目录
 
        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;
        limit_rate_after 10M;  #相当于全局，下载文件的前10M大小时不限速。如果想单一限制的话，将其放入到location配置文件中
	limit_rate  200k;      #相当于全局，#大于10m后再以128kb/s限速，可以测试。如果想单一限制的话，将其放入到location配置文件中
        location  /  {
	#if ($remote_addr !~ "^(192.168.253.132)")
	#{
	#return     301   https://$server_name$request_uri;    #重定向——最新的写法    
#	return     301   https://$host$request_uri;    #重定向——最新的写法    
	#		rewrite ^/(.*)$ https://www.baidu.com/ permanent;   #跳转到百度地址
	#}
	#	return     301   https://$server_name$request_uri;    #重定向——最新的写法    
		#$server_name  上面配置文件上面的域名（www.baidu.com）
       	        #$request_uri , $uri和$document_uri未必是用户的原始请求，在内部重定向后可能是重定向后的URI，而$request_uri 永远不会改变，始终是客户端的原始URI.
		limit_conn  one  1;   #最大并发连接数，每个客户端IP与服务器的连接也算一个连接数(每次只允许一个IP地址连接一次。)
	        limit_conn perserver 1; #服务提供的总连接数不得超过个数,超过请求的会被拒绝
	        limit_req   zone=allips  burst=1  nodelay;  #服务器请求，超过就返回503状态，nodelay 解决延迟过多的请求
		autoindex on;  #开启下载文件（默认关闭，文件访问）

		#获取客户端真实IP模块——ngx_http_proxy_module
		#官方地址：http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_redirect
#		 proxy_redirect off;  #代理服务器返回的响应头中的location头域跟refresh头域数值(apache的具体信息)
		 proxy_set_header Host $host;  
		 proxy_set_header X-Real-IP $remote_addr;  #在web服务器端获得用户的真实ip
	         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  #现在的$proxy_add_x_forwarded_for变量，X-Forwarded-For部分包含的是用户的真实ip，$remote_addr部分的值是上一台nginx的ip地址，于是通过这个赋值以后现在的X-Forwarded-For的值就变成了“用户的真实ip，第一台nginx的ip”
        }
	#location /status {
		#stub_status on;  #开启查看服务的状态码
		#access_log   off;
	        #allow 127.0.0.1;
	        #allow 192.168.253.132;
                #deny all;
		
	#}
        error_page 404 /404.html;
            location = /40x.html {
        }
        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
	location ~ \.php$ {
            root           /usr/share/nginx/html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
	    }
	#访问地址为http://192.168.253.132/down/，目录/usr/local/html/down下
	location   /down {
		root  /usr/local/html;
		autoindex on;
		autoindex_exact_size off;  #默认开启，字节为byte，关闭单位KB或者是MB、GB
		autoindex_localtime  on;  #以本地时区或UTC输出。默认关闭
	}
	location   /downs {
		alias  /usr/local/html/;
                autoindex on;
                autoindex_exact_size off;  #默认开启，字节为byte，关闭单位KB或者是MB、GB
                autoindex_localtime  on;  #以本地时区或UTC输出。默认关闭

	}

}
server {
        listen              443;
        server_name         www,jiayoua.club;
        ssl  on;
        keepalive_timeout   70;
        ssl_certificate "/etc/pki/nginx/1_www.jiayoua.club_bundle.crt";
        ssl_certificate_key "/etc/pki/nginx/2_www.jiayoua.club.key";
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;
        ssl_session_cache   shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_prefer_server_ciphers on;
        root         /usr/share/nginx/html;
	location / {
	        autoindex on;  #开启下载文件（文件访问）
      		#index               index.html index.htm;
		limit_rate_after 10M;
		limit_rate  200k; 	
        }
	location /status {
		stub_status on;  #开启查看服务的状态码
		access_log   off;
	        #allow 127.0.0.1;
		#allow 192.168.253.132;
                #deny all;
	}
	
#	location ~* \.(gif|jpg|png|swf|flv)$ {
#   	     valid_referers none blocked  *.jiayoua.club;
#	     if ($invalid_referer) {
#		         rewrite ^/ http://192.168.253.131/a.jpg;
#		         #return 404;
#		         }
#	     }
}

# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2 default_server;
#        listen       [::]:443 ssl http2 default_server;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate "/etc/pki/nginx/server.crt";
#        ssl_certificate_key "/etc/pki/nginx/private/server.key";
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers HIGH:!aNULL:!MD5;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        location / {
#        }
#
#        error_page 404 /404.html;
#            location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#    }

}
